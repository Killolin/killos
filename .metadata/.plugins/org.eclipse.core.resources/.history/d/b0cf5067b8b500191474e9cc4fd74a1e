package webtest;

import java.io.IOException;

import org.openqa.selenium.MutableCapabilities;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.Command;
import org.openqa.selenium.remote.DriverCommand;
import org.openqa.selenium.remote.Response;
import static org.openqa.selenium.remote.CapabilityType.SUPPORTS_JAVASCRIPT;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.google.common.collect.ImmutableMap;

import org.openqa.selenium.Capabilities;
import org.openqa.selenium.MutableCapabilities;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.net.UrlChecker;
import org.openqa.selenium.remote.Command;
import org.openqa.selenium.remote.DriverCommand;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.Response;
import org.openqa.selenium.remote.internal.WebElementToJsonConverter;
public class Test1234 {
private static URLAndSession uas = new URLAndSession();
	
	static {
		System.setProperty("webdriver.chrome.driver", "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chromedriver.exe");
	}


	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//这儿没法用WebDriver定义，因为会没有getSessionId方法
				ChromeDriver driver = new ChromeDriver();
				//获取已打开浏览器的sessionId
				String sessionId = driver.getSessionId().toString();
				System.out.println("sessionId:"+sessionId);
				//获取已打开浏览器的URL
				String url = ((HttpCommandExecutor)(driver.getCommandExecutor())).getAddressOfRemoteServer().toString();
				System.out.println(url);
				//保存数据
				uas.setSessionID(sessionId);
				uas.setLocalserver(url);
				driver.manage().window().maximize();
				driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);


	}
	protected void myStartSession(String sessionID) {
        if (!sessionID.isEmpty()) {
            super.setSessionId(sessionID);

        }
        Command command = new Command(super.getSessionId(), DriverCommand.STATUS);
        Response response;
        try {
            response = getCommandExecutor().execute(command);
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Can't use this Session");
            return;
        }

        this.mycapabilities = new MutableCapabilities();

        if (response.getValue() instanceof Exception) {
            ((Exception) response.getValue()).printStackTrace();
        }

    }

}
